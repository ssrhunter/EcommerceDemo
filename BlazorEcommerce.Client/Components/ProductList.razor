@using BlazorEcommerce.Client.Services.ProductService
@inject IProductService ProductService
@implements IDisposable 

@if (ProductService.Products == null || ProductService.Products.Count == 0)
{
    <span>Loading Products...</span>

}else{

<ul class="list-unstyled">
    @foreach (var product in ProductService.Products)
    {
        <li class="media my-3">
            <div class="media-img-wrapper mr-2">
                <a href="/product/@product.Id">
                    <img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
                </a>
            </div>
            <div class="media-body">
                <a href="/product/@product.Id">
                    <h4 class="mb-0">@product.Title</h4>
                </a>
                <p>@product.Description</p>
                <h5 class="price">
                    $@product.Price
                </h5>
            </div>
        </li>
    }
</ul>
}

@code {

    protected override void OnInitialized()
    {
        // Originally we were manually calling `await ProductService.GetProducts();`
        // Now the page subscribes to ProductService updates.
        // This triggers automatic page rerenders.
        ProductService.ProductsChanged += StateHasChanged;
    }

    // cleanup, unsubscribe when the component is disposed.
    public void Dispose()
    {
        ProductService.ProductsChanged -= StateHasChanged;
    }
}
